// <auto-generated />
using System;
using System.Collections.Generic;
using GlobalFileStorageSystem.Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GlobalFileStorageSystem.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250717082055_AddPasswordHashToUserEntity")]
    partial class AddPasswordHashToUserEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GlobalFileStorageSystem.Domain.Entities.FileRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EncryptionKeyId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastAccessedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MD5Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Dictionary<string, string>>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("SHA256Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UploadTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UploadedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UploadedBy");

                    b.HasIndex("TenantId", "FileName")
                        .IsUnique();

                    b.ToTable("Files");
                });

            modelBuilder.Entity("GlobalFileStorageSystem.Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("APIRateLimit")
                        .HasColumnType("integer");

                    b.Property<long>("BandwithQuota")
                        .HasColumnType("bigint");

                    b.Property<string>("BillingPlan")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ComplianceRequirements")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DataResidencyRegion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("EncryptionRequirements")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("StorageQuota")
                        .HasColumnType("bigint");

                    b.Property<string>("SubdomainPrefix")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TenantStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SubdomainPrefix")
                        .IsUnique();

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("GlobalFileStorageSystem.Domain.Entities.UsageRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("APICallsCount")
                        .HasColumnType("integer");

                    b.Property<int>("ActiveUserCount")
                        .HasColumnType("integer");

                    b.Property<long>("BandwidthUsed")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("FileOperationCount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SnapshotDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("StorageTransactions")
                        .HasColumnType("bigint");

                    b.Property<long>("StorageUsed")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "SnapshotDate")
                        .IsUnique();

                    b.ToTable("UsageRecords");
                });

            modelBuilder.Entity("GlobalFileStorageSystem.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("APIKeyHash")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.PrimitiveCollection<List<string>>("IPWhitelist")
                        .HasColumnType("text[]");

                    b.Property<DateTime?>("LastLoginTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("MFAEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SessionTimeout")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("TenantId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GlobalFileStorageSystem.Domain.Entities.FileRecord", b =>
                {
                    b.HasOne("GlobalFileStorageSystem.Domain.Entities.Tenant", "Tenant")
                        .WithMany("Files")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GlobalFileStorageSystem.Domain.Entities.User", "User")
                        .WithMany("Files")
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GlobalFileStorageSystem.Domain.Entities.UsageRecord", b =>
                {
                    b.HasOne("GlobalFileStorageSystem.Domain.Entities.Tenant", "Tenant")
                        .WithMany("Usages")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("GlobalFileStorageSystem.Domain.Entities.User", b =>
                {
                    b.HasOne("GlobalFileStorageSystem.Domain.Entities.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("GlobalFileStorageSystem.Domain.Entities.Tenant", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Usages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("GlobalFileStorageSystem.Domain.Entities.User", b =>
                {
                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
